{"parents": [], "prev": {"link": "../error/", "title": "error.h"}, "next": {"link": "../version/", "title": "version.h"}, "title": "objects.h", "meta": {}, "body": "<div class=\"section\" id=\"objects-h\">\n<h1>objects.h<a class=\"headerlink\" href=\"#objects-h\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&quot;tiro/objects.h&quot;</span><span class=\"cp\"></span>\n</pre></div>\n</div>\n<div class=\"breathe-sectiondef docutils container\">\n<p class=\"breathe-sectiondef-title rubric\">Typedefs</p>\n<dl class=\"c type\">\n<dt id=\"c.tiro_kind_t\">\n<span class=\"target\" id=\"objects_8h_1a33fc87f4e47983cf4eab3b98200020a6\"></span><em class=\"property\">typedef </em><em class=\"property\">enum</em> <a class=\"reference internal\" href=\"#c.tiro_kind\" title=\"tiro_kind\">tiro_kind</a> <code class=\"sig-name descname\">tiro_kind_t</code><a class=\"headerlink\" href=\"#c.tiro_kind_t\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Represents the kind of a tiro value. </p>\n</dd></dl>\n\n<dl class=\"c type\">\n<dt id=\"c.tiro_coroutine_callback\">\n<span class=\"target\" id=\"objects_8h_1ad11272340e3efdf29d72386393a8cf97\"></span><em class=\"property\">typedef </em>void (*<code class=\"sig-name descname\">tiro_coroutine_callback</code>)<span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> vm, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> coro, void *userdata<span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_coroutine_callback\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Represents a coroutine completion callback. </p>\n<p>These are invoked when a coroutine finishes execution, either successfully or with an error.</p>\n<p><dl class=\"simple\">\n<dt><strong>Parameters</strong></dt><dd><ul class=\"breatheparameterlist simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">vm</span></code>: The virtual machine the coroutine was running on. </p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">coro</span></code>: The completed coroutine. </p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">userdata</span></code>: The original userdata pointer that was provided when the callback was registered. </p></li>\n</ul>\n</dd>\n</dl>\n</p>\n</dd></dl>\n\n<dl class=\"c type\">\n<dt id=\"c.tiro_coroutine_cleanup\">\n<span class=\"target\" id=\"objects_8h_1a259a4d3d90faa04a9a901939db521cd8\"></span><em class=\"property\">typedef </em>void (*<code class=\"sig-name descname\">tiro_coroutine_cleanup</code>)<span class=\"sig-paren\">(</span>void *userdata<span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_coroutine_cleanup\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Represents a cleanup function associated with a coroutine callback. </p>\n<p>Cleanup functions are always executed immediately after the callback was invoked, or when the virtual machine is shutting down prior to the coroutine\u2019s completion. The cleanup function is always executed exactly once.</p>\n<p><p>TODO: Does the cleanup function need access to the vm instance? </p>\n<dl class=\"simple\">\n<dt><strong>Parameters</strong></dt><dd><ul class=\"breatheparameterlist simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">userdata</span></code>: The original userdata pointer that was provided when the callback was registered.</p></li>\n</ul>\n</dd>\n</dl>\n</p>\n</dd></dl>\n\n<dl class=\"c type\">\n<dt id=\"c.tiro_module_member_t\">\n<span class=\"target\" id=\"objects_8h_1a3ba1f2d3770b4d0913b2b84feffc7924\"></span><em class=\"property\">typedef </em><em class=\"property\">struct</em> <a class=\"reference internal\" href=\"#c.tiro_module_member_t\" title=\"tiro_module_member_t\">tiro_module_member_t</a> <code class=\"sig-name descname\">tiro_module_member_t</code><a class=\"headerlink\" href=\"#c.tiro_module_member_t\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd></dd></dl>\n\n<dl class=\"c type\">\n<dt id=\"c.tiro_native_type_t\">\n<span class=\"target\" id=\"objects_8h_1ab72e665b97be7dfd71e3120a3d5cc73d\"></span><em class=\"property\">typedef </em><em class=\"property\">struct</em> <a class=\"reference internal\" href=\"#c.tiro_native_type\" title=\"tiro_native_type\">tiro_native_type</a> <code class=\"sig-name descname\">tiro_native_type_t</code><a class=\"headerlink\" href=\"#c.tiro_native_type_t\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Describes a native object type to the tiro runtime. </p>\n<p>Instances of this type must be provided to the API when constructing a new native object.</p>\n<p>Native objects that are created with a certain type will continue refencing that type instance by its address. The lifetime of <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_native_type_t</span></code> instances is not managued by the runtime, they must remain valid for as long as there are native objects referring to them.</p>\n<p><dl class=\"xrefsect\">\n<dt>\n<em>Todo:</em></dt>\n<dd><p>DRAFT API. Will probably be replaced with native user defined types.</p>\n</dd></dl>\n\n</p>\n<p><dl class=\"simple\">\n<dt><strong>Warning</strong></dt><dd><p>The native type instance must not be changed while it is being referenced by native objects! </p>\n</dd>\n</dl>\n</p>\n</dd></dl>\n\n<dl class=\"c type\">\n<dt id=\"c.tiro_sync_function_t\">\n<span class=\"target\" id=\"objects_8h_1ab3829a36dd6213ac4af8f386c8f5ed0b\"></span><em class=\"property\">typedef </em>void (*<code class=\"sig-name descname\">tiro_sync_function_t</code>)<span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> vm, <a class=\"reference internal\" href=\"../def/#c.tiro_sync_frame_t\" title=\"tiro_sync_frame_t\">tiro_sync_frame_t</a> frame<span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_sync_function_t\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>The prototype of a native function callback that provides a synchronous tiro function. </p>\n<p>This type of native function is appropriate for simple, nonblocking operations. Use the more complex asynchronous API instead if the operation has the potential of blocking the process.</p>\n<p>Note that this API does not allow for custom native userdata. Use native objects instead and pass them in the closure.</p>\n<p><p>TODO: Exception API </p>\n<dl class=\"simple\">\n<dt><strong>Parameters</strong></dt><dd><ul class=\"breatheparameterlist simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">vm</span></code>: The virtual machine the function is executing on. </p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">frame</span></code>: The function call frame. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_sync_frame_arg</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_sync_frame_argc</span></code> to access the function call arguments. Call <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_sync_frame_result</span></code> to set the return value (it defaults to null if not set). The closure is also available by calling <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_sync_frame_closure</span></code>. The frame value is only valid for the duration of the function call.</p></li>\n</ul>\n</dd>\n</dl>\n</p>\n</dd></dl>\n\n<dl class=\"c type\">\n<dt id=\"c.tiro_async_function_t\">\n<span class=\"target\" id=\"objects_8h_1a48e96faa152c1249a281fd2367aac50a\"></span><em class=\"property\">typedef </em>void (*<code class=\"sig-name descname\">tiro_async_function_t</code>)<span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> vm, <a class=\"reference internal\" href=\"../def/#c.tiro_async_frame_t\" title=\"tiro_async_frame_t\">tiro_async_frame_t</a> frame<span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_async_function_t\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>The prototype of a native function callback that provides an asynchronous tiro function. </p>\n<p>Functions of this type should be used to implement long running operations that would otherwise block the calling coroutine (for example, a socket read or write).</p>\n<p>Calling an asynchronous function will pause (\u201cyield\u201d) the calling coroutine. It will be resumed when a result is provided to the frame object, e.g. by calling <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_async_frame_result</span></code>. Attempting to resume a coroutine multiple times is an error.</p>\n<p>Note that this API does not allow for custom native userdata. Use native objects instead and pass them in the closure.</p>\n<p><p>The frame remains valid until it is freed by the caller by invoking </p>\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_async_frame_free</span></code> (forgetting to free a frame results in a memory leak).<dl class=\"simple\">\n<dt><strong>Parameters</strong></dt><dd><ul class=\"breatheparameterlist simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">vm</span></code>: The virtual machine the function is executing on. </p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">frame</span></code>: The function call frame. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_async_frame_arg</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_async_frame_argc</span></code> to access the function call arguments. Call <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_async_frame_result</span></code> to set the return value (it defaults to null if not set). The closure is also available by calling <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_async_frame_closure</span></code>.</p></li>\n</ul>\n</dd>\n</dl>\n</p>\n<p>TODO: Exception API </p>\n</dd></dl>\n\n</div>\n<div class=\"breathe-sectiondef docutils container\">\n<p class=\"breathe-sectiondef-title rubric\">Enums</p>\n<dl class=\"c enum\">\n<dt id=\"c.tiro_kind\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1d\"></span><em class=\"property\">enum </em><code class=\"sig-name descname\">tiro_kind</code><a class=\"headerlink\" href=\"#c.tiro_kind\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Represents the kind of a tiro value. </p>\n<p><em>Values:</em></p>\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_NULL\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1da5a1257932f9d3554a02790e396b9e388\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_NULL</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_NULL\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is null. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_BOOLEAN\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1dad4d967d5a91d6cc377500ce712587b79\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_BOOLEAN</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_BOOLEAN\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is true or false. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_INTEGER\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1da452052452bb461108fcbf7c9baf0f97d\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_INTEGER</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_INTEGER\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is an integer. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_FLOAT\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1da9f957d89544829242b9eb2e066ad9fcc\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_FLOAT</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_FLOAT\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is a floating point number. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_STRING\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1dab82db4d31b68c5a4e0bc5445348f98bf\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_STRING</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_STRING\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is a string. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_FUNCTION\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1dac41bbd1f516e411606c47600d5749fc6\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_FUNCTION</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_FUNCTION\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is a function. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_TUPLE\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1da522f6aeb69bb7b4dc6334f9bf816ff81\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_TUPLE</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_TUPLE\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is a tuple. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_RECORD\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1da14bb6921f9b23d6beab6efbc092d2c70\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_RECORD</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_RECORD\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is a record. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_ARRAY\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1daa7bff7fac75f7ee9c526ae0e604635f3\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_ARRAY</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_ARRAY\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is an array. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_RESULT\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1dac31ea851e3e5c7ace6ef7f165724d0c4\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_RESULT</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_RESULT\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is a result. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_COROUTINE\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1dac317df4fa1985420078904ef555c4bf4\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_COROUTINE</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_COROUTINE\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is a coroutine. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_MODULE\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1da6f2f1c1ccae623f5988904c3fdbaaa2a\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_MODULE</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_MODULE\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is a module. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_TYPE\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1da6b96677fd0d03fbe60174f756faaea42\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_TYPE</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_TYPE\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is a type. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_NATIVE\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1da162450bd77567d03f48a8a4c06c602c1\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_NATIVE</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_NATIVE\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is a native object. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_INTERNAL\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1daa8ab44eaaf53d117f2dcbab6c8591bab\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_INTERNAL</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_INTERNAL\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Value is some other, internal type. </p>\n</dd></dl>\n\n<dl class=\"c enumerator\">\n<dt id=\"c.tiro_kind.TIRO_KIND_INVALID\">\n<span class=\"target\" id=\"objects_8h_1a8e10aabb7022e16967370cbbe0337b1da011b32b7463c26e75610ff2bf47571e7\"></span><em class=\"property\">enumerator </em><code class=\"sig-name descname\">TIRO_KIND_INVALID</code><a class=\"headerlink\" href=\"#c.tiro_kind.TIRO_KIND_INVALID\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Invalid value (e.g. null handle) </p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"breathe-sectiondef docutils container\">\n<p class=\"breathe-sectiondef-title rubric\">Functions</p>\n<dl class=\"c function\">\n<dt id=\"c.tiro_kind_str\">\n<span class=\"target\" id=\"objects_8h_1a3c9de67e02c09dc4995ace72d7fc8d54\"></span><em class=\"property\">const</em> char *<code class=\"sig-name descname\">tiro_kind_str</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#c.tiro_kind_t\" title=\"tiro_kind_t\">tiro_kind_t</a> <em>kind</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_kind_str\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the name of the kind, formatted as a string. </p>\n<p>The string points into static storage and must not be freed. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_value_kind\">\n<span class=\"target\" id=\"objects_8h_1a83acd0da64cbcb7ec6fd954c87f95336\"></span><a class=\"reference internal\" href=\"#c.tiro_kind_t\" title=\"tiro_kind_t\">tiro_kind_t</a> <code class=\"sig-name descname\">tiro_value_kind</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_value_kind\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the kind of the handle\u2019s current value. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_value_to_string\">\n<span class=\"target\" id=\"objects_8h_1ae0d40ac82a6a372319731d8854263390\"></span>void <code class=\"sig-name descname\">tiro_value_to_string</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_value_to_string\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Outputs a string representing the given value. </p>\n<p>The string is assigned to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_value_copy\">\n<span class=\"target\" id=\"objects_8h_1a9da5119503262167041f4a1a28c74a7e\"></span>void <code class=\"sig-name descname\">tiro_value_copy</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_value_copy\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Copies the current <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_value_type\">\n<span class=\"target\" id=\"objects_8h_1a7107badc10b1d1d3cc72f4055a0f3a04\"></span>void <code class=\"sig-name descname\">tiro_value_type</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_value_type\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the type of the given <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> by assigning it to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n<p>This function will fail with an error when attempting to access an internal type. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_kind_type\">\n<span class=\"target\" id=\"objects_8h_1a61d700b482d2896875b0642b2d70dd0b\"></span>void <code class=\"sig-name descname\">tiro_kind_type</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"#c.tiro_kind_t\" title=\"tiro_kind_t\">tiro_kind_t</a> <em>kind</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_kind_type\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Retrieves the type instance that corresponds to the given <code class=\"docutils literal notranslate\"><span class=\"pre\">kind</span></code> and assigns it to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">kind</span></code> must represent a valid, exported value kind, otherwise an error is returned instead. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_null\">\n<span class=\"target\" id=\"objects_8h_1a3e80a3f8b3a2e15a51d087344d4e2e1a\"></span>void <code class=\"sig-name descname\">tiro_make_null</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_null\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Sets the given <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code> handle to null. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_boolean\">\n<span class=\"target\" id=\"objects_8h_1a8f4f36c0aa9261bca7878f73736c8edb\"></span>void <code class=\"sig-name descname\">tiro_make_boolean</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, bool <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_boolean\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the specified boolean value via the output argument <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_boolean_value\">\n<span class=\"target\" id=\"objects_8h_1a012806f5a9f5ed509d01ad10c01c5369\"></span>bool <code class=\"sig-name descname\">tiro_boolean_value</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_boolean_value\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> converted to a boolean value. </p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code> are considered false, all other values will return <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code>. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_integer\">\n<span class=\"target\" id=\"objects_8h_1a577558fe5738567a1a104045247800c3\"></span>void <code class=\"sig-name descname\">tiro_make_integer</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, int64_t <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_integer\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs an integer with the given value. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_ALLOC</span></code> on allocation failure. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_integer_value\">\n<span class=\"target\" id=\"objects_8h_1a7e3032ea966d186b94cb10caf3d2edcd\"></span>int64_t <code class=\"sig-name descname\">tiro_integer_value</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_integer_value\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> converted to an integer. </p>\n<p>This function supports conversion for floating point values (they are truncated to an integer). All other values return 0 (use <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_value_kind</span></code> to disambiguate between types). </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_float\">\n<span class=\"target\" id=\"objects_8h_1a46d9edcb965a14a04641452c3ee120e2\"></span>void <code class=\"sig-name descname\">tiro_make_float</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, double <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_float\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a float with the given value. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_ALLOC</span></code> on allocation failure. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_float_value\">\n<span class=\"target\" id=\"objects_8h_1a1ff9fbb5cca9fff2b7ac2049b7c4dedc\"></span>double <code class=\"sig-name descname\">tiro_float_value</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_float_value\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the floating point of <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>. </p>\n<p>This function supports conversion for integer values, all other values will return 0 (use <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_value_kind</span></code> to disambiguate between types). </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_string\">\n<span class=\"target\" id=\"objects_8h_1a24fa853fd2182e56cfc41864e1547380\"></span>void <code class=\"sig-name descname\">tiro_make_string</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <em class=\"property\">const</em> char *<em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_string\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a new string with the given content. </p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> must be zero terminated or NULL. Passing NULL for <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> creates an empty string. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_ALLOC</span></code> on allocation failure. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_string_from_data\">\n<span class=\"target\" id=\"objects_8h_1acb73a8b03e4e2d3747c688490456ce94\"></span>void <code class=\"sig-name descname\">tiro_make_string_from_data</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <em class=\"property\">const</em> char *<em>data</em>, size_t <em>length</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_string_from_data\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a new string with the given content. </p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> must consist of <code class=\"docutils literal notranslate\"><span class=\"pre\">length</span></code> readable bytes. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_ALLOC</span></code> on allocation failure. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_string_value\">\n<span class=\"target\" id=\"objects_8h_1a70c08836d39baa251b1825d9ef9472c9\"></span>void <code class=\"sig-name descname\">tiro_string_value</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>string</em>, <em class=\"property\">const</em> char **<em>data</em>, size_t *<em>length</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_string_value\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Retrieves the string\u2019s content as a (data, length)-pair without copying the data. </p>\n<p>The pointer to the string\u2019s storage will be placed in <code class=\"docutils literal notranslate\"><span class=\"pre\">*data</span></code>, and the length (in bytes) will be assigned to <code class=\"docutils literal notranslate\"><span class=\"pre\">*length</span></code>. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the value is not actually a string.</p>\n<p><dl class=\"simple\">\n<dt><strong>Warning</strong></dt><dd><p>The string content returned through <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">length</span></code> is a view into the string\u2019s current storage. Because objects may move on the heap (e.g. because of garbage collection), this data may be invalidated. The data may only be used immediately after calling this function, and must not be used after another possibly allocating tiro_* function has been called.</p>\n</dd>\n<dt><strong>Warning</strong></dt><dd><p>The string returned by this function is not zero terminated. </p>\n</dd>\n</dl>\n</p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_string_cstr\">\n<span class=\"target\" id=\"objects_8h_1a0c376bdd2d1776ee3a8fa94bd27f8b0d\"></span>void <code class=\"sig-name descname\">tiro_string_cstr</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>string</em>, char **<em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_string_cstr\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Retrieves the string\u2019s content and creates a new zero terminated c string, which is assigned to <code class=\"docutils literal notranslate\"><span class=\"pre\">*result</span></code>. </p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">*result</span></code> is only assigned to if the construction of the string succeeded (in which case <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_OK</span></code> will be returned). Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the value is not actually a string.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_OK</span></code> was returned, then <code class=\"docutils literal notranslate\"><span class=\"pre\">*result</span></code> must be passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">free</span></code> for cleanup. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_tuple\">\n<span class=\"target\" id=\"objects_8h_1a97a5c18df5cb03f60d4e39b6813383d3\"></span>void <code class=\"sig-name descname\">tiro_make_tuple</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, size_t <em>size</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_tuple\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a new tuple with <code class=\"docutils literal notranslate\"><span class=\"pre\">size</span></code> entries. </p>\n<p>All entries are initially null. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_ALLOC</span></code> on allocation failure. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_tuple_size\">\n<span class=\"target\" id=\"objects_8h_1a909c4c5a91ead64ac03cc1ffb5be8720\"></span>size_t <code class=\"sig-name descname\">tiro_tuple_size</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>tuple</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_tuple_size\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the tuple\u2019s size, or 0 if the given value is not a tuple (use <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_value_kind</span></code> to disambiguate between types). </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_tuple_get\">\n<span class=\"target\" id=\"objects_8h_1a6150385c640967fc6b4565baf969b4d9\"></span>void <code class=\"sig-name descname\">tiro_tuple_get</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>tuple</em>, size_t <em>index</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_tuple_get\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Retrieves the tuple element at the given <code class=\"docutils literal notranslate\"><span class=\"pre\">index</span></code> from <code class=\"docutils literal notranslate\"><span class=\"pre\">tuple</span></code> and assigns it to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>, unless an error occcurs. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the instance is not a tuple, or <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_OUT_OF_BOUNDS</span></code> if the index is out of bounds. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_tuple_set\">\n<span class=\"target\" id=\"objects_8h_1a3225ee3d9da805a47898d4ad6bf86333\"></span>void <code class=\"sig-name descname\">tiro_tuple_set</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>tuple</em>, size_t <em>index</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_tuple_set\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Sets the tuple\u2019s element at position <code class=\"docutils literal notranslate\"><span class=\"pre\">index</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the instance is not a tuple, or <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_OUT_OF_BOUNDS</span></code> if the index is out of bounds. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_record\">\n<span class=\"target\" id=\"objects_8h_1a005919c5d3b429725a4731b04b4d7c3b\"></span>void <code class=\"sig-name descname\">tiro_make_record</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>keys</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_record\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a new record with the given key names. </p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">keys</span></code> must be an array consisting of strings (which mus be unique). The specified keys will be valid propery names on the new record. The value associated with each key will be initialized to null.</p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if <code class=\"docutils literal notranslate\"><span class=\"pre\">keys</span></code> is not an array, or if its contents are not all strings. On success, the constructed record will be assigned to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_record_keys\">\n<span class=\"target\" id=\"objects_8h_1aab87fb99983835722666dbdfa87cf987\"></span>void <code class=\"sig-name descname\">tiro_record_keys</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>record</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_record_keys\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Retrieves an array of valid keys for the given record. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the instance is not a record. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_record_get\">\n<span class=\"target\" id=\"objects_8h_1a059bfad23275efdf589ea699796d9212\"></span>void <code class=\"sig-name descname\">tiro_record_get</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>record</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>key</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_record_get\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Retrieves the value associated with the given key on this record. </p>\n<p>On success, the value will be assigned to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the instance is not a record, or if <code class=\"docutils literal notranslate\"><span class=\"pre\">key</span></code> is not a string. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_KEY</span></code> if the key is invalid for this record. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_record_set\">\n<span class=\"target\" id=\"objects_8h_1ade4b331bb37405cb103be916fa61cb1b\"></span>void <code class=\"sig-name descname\">tiro_record_set</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>record</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>key</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_record_set\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Sets the record\u2019s value associated with the given <code class=\"docutils literal notranslate\"><span class=\"pre\">key</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the instance is not a record, or if <code class=\"docutils literal notranslate\"><span class=\"pre\">key</span></code> is not a string. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_KEY</span></code> if the key is invalid for this record. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_array\">\n<span class=\"target\" id=\"objects_8h_1af2e3a5070393d7fb5808bdab12f459e4\"></span>void <code class=\"sig-name descname\">tiro_make_array</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, size_t <em>initial_capacity</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_array\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a new, empty array with the given initial capacity. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_ALLOC</span></code> on allocation failure. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_array_size\">\n<span class=\"target\" id=\"objects_8h_1a6b50a95c9e925d1025d7e0e9affc66fc\"></span>size_t <code class=\"sig-name descname\">tiro_array_size</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>array</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_array_size\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the array\u2019s size, or 0 if the given value is not an array (use <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_value_kind</span></code> to disambiguate between types). </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_array_get\">\n<span class=\"target\" id=\"objects_8h_1a58a8d6ede580b4f9c81ce17032dd9650\"></span>void <code class=\"sig-name descname\">tiro_array_get</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>array</em>, size_t <em>index</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_array_get\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Retrieves the array element at the given <code class=\"docutils literal notranslate\"><span class=\"pre\">index</span></code> from <code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> and assigns it to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>, unless an error occcurs. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the instance is not an array, or <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_OUT_OF_BOUNDS</span></code> if the index is out of bounds. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_array_set\">\n<span class=\"target\" id=\"objects_8h_1a9435879cd634afed97e2726893094b77\"></span>void <code class=\"sig-name descname\">tiro_array_set</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>array</em>, size_t <em>index</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_array_set\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Sets the array\u2019s element at position <code class=\"docutils literal notranslate\"><span class=\"pre\">index</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the instance is not an array, or <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_OUT_OF_BOUNDS</span></code> if the index is out of bounds. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_array_push\">\n<span class=\"target\" id=\"objects_8h_1acba4c2f04af85a1f2cc9e237b22f3262\"></span>void <code class=\"sig-name descname\">tiro_array_push</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>array</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_array_push\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Appends <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> to the given <code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code>. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_array_pop\">\n<span class=\"target\" id=\"objects_8h_1a9503d3df9bbd948ab2e670a448f0f064\"></span>void <code class=\"sig-name descname\">tiro_array_pop</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>array</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_array_pop\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Removes the last element from the given <code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code>. </p>\n<p>Does nothing (successfully) if the array is already empty. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_OUT_OF_BOUNDS</span></code> if the array is already empty. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_array_clear\">\n<span class=\"target\" id=\"objects_8h_1a676f6fbec634442e92e41c803034e1c7\"></span>void <code class=\"sig-name descname\">tiro_array_clear</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>array</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_array_clear\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Removes all elements from the given <code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code>. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the value is not an array. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_success\">\n<span class=\"target\" id=\"objects_8h_1aeb72981b74ddf899f32659b8c1c77bba\"></span>void <code class=\"sig-name descname\">tiro_make_success</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_success\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a new successful result with the given value. </p>\n<p>The new object will be placed into <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_failure\">\n<span class=\"target\" id=\"objects_8h_1a10cdfeccdceec144258db6b205089aac\"></span>void <code class=\"sig-name descname\">tiro_make_failure</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>reason</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_failure\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a new failed result with the given reason. </p>\n<p>The new object will be placed into <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_result_is_success\">\n<span class=\"target\" id=\"objects_8h_1a59f847dd0e66b61d6dc48f55f794e0b1\"></span>bool <code class=\"sig-name descname\">tiro_result_is_success</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>instance</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_result_is_success\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns true if the result in <code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code> represents success. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_result_is_failure\">\n<span class=\"target\" id=\"objects_8h_1a980bb19f7dec713d8c0840414de2ac4a\"></span>bool <code class=\"sig-name descname\">tiro_result_is_failure</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>instance</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_result_is_failure\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns true if the result in <code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code> represents failure. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_result_value\">\n<span class=\"target\" id=\"objects_8h_1a4bfed763c80fc1320459aac51d99cbe1\"></span>void <code class=\"sig-name descname\">tiro_result_value</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>instance</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>out</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_result_value\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Retrieves the value from the result in <code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code> and writes it into <code class=\"docutils literal notranslate\"><span class=\"pre\">out</span></code>. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_STATE</span></code> if the result does not represent success, or <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the instance is no result at all. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_result_reason\">\n<span class=\"target\" id=\"objects_8h_1ac2e9fdd6415019af24d7fc6a99fc8109\"></span>void <code class=\"sig-name descname\">tiro_result_reason</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>instance</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>out</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_result_reason\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Retrieves the reason from the result in <code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code> and writes it into <code class=\"docutils literal notranslate\"><span class=\"pre\">out</span></code>. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_STATE</span></code> if the result does not represent failure, or <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the instance is no result at all. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_coroutine\">\n<span class=\"target\" id=\"objects_8h_1a05bcf1359a44e7965dd6d0158408f4c9\"></span>void <code class=\"sig-name descname\">tiro_make_coroutine</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>func</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>arguments</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_coroutine\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a new coroutine that will execute the given function. </p>\n<p>Note that the coroutine will not be started before passing it to <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_coroutine_start</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">func</span></code> must be a value of kind <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_KIND_FUNCTION</span></code>, otherwise <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> is returned.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">arguments</span></code> may be a NULL handle, a handle referencing a null value (to pass no arguments) or a tuple of values that will be passed to the function as arguments.</p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_ALLOC</span></code> on allocation failure. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_coroutine_started\">\n<span class=\"target\" id=\"objects_8h_1ac7cfc8235a3403af9226d1880a8e1775\"></span>bool <code class=\"sig-name descname\">tiro_coroutine_started</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>coroutine</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_coroutine_started\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns true if the coroutine has been started, false otherwise. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_coroutine_completed\">\n<span class=\"target\" id=\"objects_8h_1afc5be552a70b2546984fa24a0eef635d\"></span>bool <code class=\"sig-name descname\">tiro_coroutine_completed</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>coroutine</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_coroutine_completed\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns true if the coroutine has finished its execution, false otherwise. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_coroutine_result\">\n<span class=\"target\" id=\"objects_8h_1a25e32f6463f0de541cf02774f16c1f1f\"></span>void <code class=\"sig-name descname\">tiro_coroutine_result</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>coroutine</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_coroutine_result\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the coroutine\u2019s result by assigning it to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n<p>The coroutine must have completed execution, i.e. <code class=\"docutils literal notranslate\"><a class=\"reference internal\" href=\"#objects_8h_1afc5be552a70b2546984fa24a0eef635d\"><span class=\"std std-ref\"><span class=\"pre\">tiro_coroutine_completed()</span></span></a></code> must return true (for example, when invoked from a coroutine\u2019s completion callback). </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_coroutine_set_callback\">\n<span class=\"target\" id=\"objects_8h_1a3a8e13d07b4ff02faedf453b9649f9a6\"></span>void <code class=\"sig-name descname\">tiro_coroutine_set_callback</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>coroutine</em>, <a class=\"reference internal\" href=\"#c.tiro_coroutine_callback\" title=\"tiro_coroutine_callback\">tiro_coroutine_callback</a> <em>callback</em>, <a class=\"reference internal\" href=\"#c.tiro_coroutine_cleanup\" title=\"tiro_coroutine_cleanup\">tiro_coroutine_cleanup</a> <em>cleanup</em>, void *<em>userdata</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_coroutine_set_callback\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Schedules the given callback to be invoked once the coroutine completes. </p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">coroutine</span></code> must be a handle to a coroutine, otherwise <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> is returned.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">callback</span></code> will be invoked when the coroutine completes its execution. A coroutine completes when the outermost function returns normally or if an uncaught exception is thrown from that function. The callback receives a handle to the completed coroutine, which can be inspected in order to retrieve the coroutine\u2019s result, and the original <code class=\"docutils literal notranslate\"><span class=\"pre\">userdata</span></code> argument. It will <em>not</em> be invoked if the virtual machine shuts down before the coroutine has completed. The callback must not be NULL, otherwise <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_ARG</span></code> will be returned.</p>\n<p>Note: all callback invocations happen from within one of the <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_vm_run*</span></code> functions.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">cleanup</span></code> will be invoked to release state that may be owned by the callback. It will be called directly after the callback has been invoked, or as part of the virtual machine\u2019s shutdown procedure. The cleanup function receives the original <code class=\"docutils literal notranslate\"><span class=\"pre\">userdata</span></code> argument. When present, <code class=\"docutils literal notranslate\"><span class=\"pre\">cleanup</span></code> will be called exactly once. The <code class=\"docutils literal notranslate\"><span class=\"pre\">cleanup</span></code> function is optional.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">userdata</span></code> will be passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">callback</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">cleanup</span></code> when appropriate, and it will not be used in any other way. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_coroutine_start\">\n<span class=\"target\" id=\"objects_8h_1a070bfbafd0148968b336d404e4628d38\"></span>void <code class=\"sig-name descname\">tiro_coroutine_start</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>coroutine</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_coroutine_start\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Starts the given coroutine by scheduling it for execution. </p>\n<p>The coroutine must not have been started before. Coroutines are not invoked from this function. They will be executed from within one of the <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_vm_run*</span></code> functions. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the argument is not a coroutine, or <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_STATE</span></code> if the coroutine cannot be started. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_module\">\n<span class=\"target\" id=\"objects_8h_1aa9748e546ff6cbab0dea7337601d6040\"></span>void <code class=\"sig-name descname\">tiro_make_module</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <em class=\"property\">const</em> char *<em>name</em>, <a class=\"reference internal\" href=\"#c.tiro_module_member_t\" title=\"tiro_module_member_t\">tiro_module_member_t</a> *<em>members</em>, size_t <em>members_length</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_module\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Creates a new module with the given <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> from the given <code class=\"docutils literal notranslate\"><span class=\"pre\">members</span></code> list. </p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> must be a valid, null terminated string and non-empty string.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">members</span></code> must be a valid pointer that points to <code class=\"docutils literal notranslate\"><span class=\"pre\">members_length</span></code> entries. When the module has been created successfully, it will be written to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>.</p>\n<p><p>TODO: Do we need an API for non-exported members? </p>\n<dl class=\"simple\">\n<dt><strong>Note</strong></dt><dd><p>All members listed in this function call will be exported by the module.</p>\n</dd>\n</dl>\n</p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_module_get_export\">\n<span class=\"target\" id=\"objects_8h_1aef588d0a12d7c1c5a9fc383a9056e5c2\"></span>void <code class=\"sig-name descname\">tiro_module_get_export</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>module</em>, <em class=\"property\">const</em> char *<em>export_name</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_module_get_export\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Attempts to retrieve the exported module member called <code class=\"docutils literal notranslate\"><span class=\"pre\">export_name</span></code> from the given module. </p>\n<p>On success, the member will be written to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>.</p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the module is not actually of kind <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_KIND_MODULE</span></code>. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_EXPORT_NOT_FOUND</span></code> if no exported member with that name exists in this module.</p>\n<p>TODO: Use tiro strings instead of c strings? Or expose symbols? </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_type_name\">\n<span class=\"target\" id=\"objects_8h_1acc6ebeeb523e608094b36d1e3964f20e\"></span>void <code class=\"sig-name descname\">tiro_type_name</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>type</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_type_name\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Retrieves the name of this <code class=\"docutils literal notranslate\"><span class=\"pre\">type</span></code> and assigns it to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_BAD_TYPE</span></code> if the value is not a type. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_native\">\n<span class=\"target\" id=\"objects_8h_1af303beb7af12d40365adc07e5d9f7a45\"></span>void <code class=\"sig-name descname\">tiro_make_native</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <em class=\"property\">const</em> <a class=\"reference internal\" href=\"#c.tiro_native_type_t\" title=\"tiro_native_type_t\">tiro_native_type_t</a> *<em>type_descriptor</em>, size_t <em>size</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_native\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a new native object of the given type and size. </p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">type_descriptor</span></code> must describe the properties of the new object. The native object will store a copy of this pointer, accessible via <code class=\"docutils literal notranslate\"><a class=\"reference internal\" href=\"#structtiro__native__type\"><span class=\"std std-ref\"><span class=\"pre\">tiro_native_type()</span></span></a></code>. The pointer must remain valid for the lifetime of the object, which usually means the lifetime of the vm itself.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">size</span></code> (in bytes) specifies the size that will be allocated as user storage and must be greater than 0.</p>\n<p>On success, the constructed object will be written to <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code> and the object\u2019s user storage will be accessible via <code class=\"docutils literal notranslate\"><a class=\"reference internal\" href=\"#objects_8h_1a99bff510ea195b106e7d182986868993\"><span class=\"std std-ref\"><span class=\"pre\">tiro_native_data()</span></span></a></code>. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_native_type_descriptor\">\n<span class=\"target\" id=\"objects_8h_1a8b9b7562181dea9a7be89f5f737766b6\"></span><em class=\"property\">const</em> <a class=\"reference internal\" href=\"#c.tiro_native_type_t\" title=\"tiro_native_type_t\">tiro_native_type_t</a> *<code class=\"sig-name descname\">tiro_native_type_descriptor</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>object</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_native_type_descriptor\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the address of the <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_native_type_t</span></code> instance that was used to create the given native object. </p>\n<p>Returns NULL on error. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_native_data\">\n<span class=\"target\" id=\"objects_8h_1a99bff510ea195b106e7d182986868993\"></span>void *<code class=\"sig-name descname\">tiro_native_data</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>object</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_native_data\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the address of the allocated user storage of the given native object. </p>\n<p>Returns NULL on error. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_native_size\">\n<span class=\"target\" id=\"objects_8h_1a62ae99a83e39e9af563e820ff92734bf\"></span>size_t <code class=\"sig-name descname\">tiro_native_size</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>object</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_native_size\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the size (in bytes) of the given native object\u2019s user storage. </p>\n<p>Returns 0 on error. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_sync_frame_argc\">\n<span class=\"target\" id=\"objects_8h_1aa873351ac30d7555598aebea8d20d4a6\"></span>size_t <code class=\"sig-name descname\">tiro_sync_frame_argc</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_sync_frame_t\" title=\"tiro_sync_frame_t\">tiro_sync_frame_t</a> <em>frame</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_sync_frame_argc\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the number of function call arguments present in the given frame. </p>\n<p>Returns 0 for invalid input arguments. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_sync_frame_arg\">\n<span class=\"target\" id=\"objects_8h_1a9561ebcd3e6cc929b1ac9b1c42b808b9\"></span>void <code class=\"sig-name descname\">tiro_sync_frame_arg</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_sync_frame_t\" title=\"tiro_sync_frame_t\">tiro_sync_frame_t</a> <em>frame</em>, size_t <em>index</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_sync_frame_arg\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Stores the function call argument with the given <code class=\"docutils literal notranslate\"><span class=\"pre\">index</span></code> into <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_OUT_OF_BOUNDS</span></code> if the argument index is invalid. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_sync_frame_closure\">\n<span class=\"target\" id=\"objects_8h_1a1d717d2def0beb4645e769d129f35fa6\"></span>void <code class=\"sig-name descname\">tiro_sync_frame_closure</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_sync_frame_t\" title=\"tiro_sync_frame_t\">tiro_sync_frame_t</a> <em>frame</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_sync_frame_closure\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the closure value which was specified when the function was created. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_sync_frame_result\">\n<span class=\"target\" id=\"objects_8h_1a4e1ca2df90638ff0f369a95e8173dd71\"></span>void <code class=\"sig-name descname\">tiro_sync_frame_result</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_sync_frame_t\" title=\"tiro_sync_frame_t\">tiro_sync_frame_t</a> <em>frame</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_sync_frame_result\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Sets the return value for the given function call frame to the given <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_sync_function\">\n<span class=\"target\" id=\"objects_8h_1a2812bdaf9a78a4a4f3f70e7c61599ecf\"></span>void <code class=\"sig-name descname\">tiro_make_sync_function</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>name</em>, <a class=\"reference internal\" href=\"#c.tiro_sync_function_t\" title=\"tiro_sync_function_t\">tiro_sync_function_t</a> <em>func</em>, size_t <em>argc</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>closure</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_sync_function\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a new function object with the given name that will invoke the native function <code class=\"docutils literal notranslate\"><span class=\"pre\">func</span></code> when called. </p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">argc</span></code> is the number of arguments required for calling <code class=\"docutils literal notranslate\"><span class=\"pre\">func</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">closure</span></code> may be an arbitrary value that will be passed to the function on every invocation.</p>\n<p>On success, the new function will be stored in <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_BAD_TYPE</span></code> if <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> is not a string. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_BAD_ARG</span></code> if the the requested number of parameters is too large. The current maximum is <code class=\"docutils literal notranslate\"><span class=\"pre\">1024</span></code>. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_async_frame_free\">\n<span class=\"target\" id=\"objects_8h_1a0db754109bdfd527d3614e98bf36a889\"></span>void <code class=\"sig-name descname\">tiro_async_frame_free</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_async_frame_t\" title=\"tiro_async_frame_t\">tiro_async_frame_t</a> <em>frame</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_async_frame_free\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Frees an async frame. </p>\n<p>Does nothing if <code class=\"docutils literal notranslate\"><span class=\"pre\">frame</span></code> is NULL.</p>\n<p>Frames are allocated for the caller before invoking the native callback function. They must be freed by calling this function after async operation has been completed (e.g. after calling <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_async_frame_result(...)</span></code>).</p>\n<p><dl class=\"simple\">\n<dt><strong>Warning</strong></dt><dd><p><em>All</em> async call frames must be freed before the vm itself is freed. If there are pending async operations when the vm shall be destroyed, always free them first (they do not have to receive a result). </p>\n</dd>\n</dl>\n</p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_async_frame_vm\">\n<span class=\"target\" id=\"objects_8h_1ae945bf49195067c6a6134513d25d2d3e\"></span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <code class=\"sig-name descname\">tiro_async_frame_vm</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_async_frame_t\" title=\"tiro_async_frame_t\">tiro_async_frame_t</a> <em>frame</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_async_frame_vm\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the vm instance that this frame belongs to. </p>\n<p>Returns NULL on error. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_async_frame_argc\">\n<span class=\"target\" id=\"objects_8h_1afe25fb709de3ce4e42cab346b7a102d5\"></span>size_t <code class=\"sig-name descname\">tiro_async_frame_argc</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_async_frame_t\" title=\"tiro_async_frame_t\">tiro_async_frame_t</a> <em>frame</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_async_frame_argc\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the number of function call arguments received by this frame. </p>\n<p>Returns 0 on error. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_async_frame_arg\">\n<span class=\"target\" id=\"objects_8h_1aa39196211a61584803f320d3d3fd8ebf\"></span>void <code class=\"sig-name descname\">tiro_async_frame_arg</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_async_frame_t\" title=\"tiro_async_frame_t\">tiro_async_frame_t</a> <em>frame</em>, size_t <em>index</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_async_frame_arg\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Retrieves the function call argument at the specified index and stores it into <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. </p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_ERROR_OUT_OF_BOUNDS</span></code> if the argument index is invalid. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_async_frame_closure\">\n<span class=\"target\" id=\"objects_8h_1a14a24192da51bcdd6de1d20304eacb3c\"></span>void <code class=\"sig-name descname\">tiro_async_frame_closure</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_async_frame_t\" title=\"tiro_async_frame_t\">tiro_async_frame_t</a> <em>frame</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_async_frame_closure\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Returns the closure value which was specified when the function was created. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_async_frame_result\">\n<span class=\"target\" id=\"objects_8h_1ac0de35c0c965d31ad8fb67ed37a489be\"></span>void <code class=\"sig-name descname\">tiro_async_frame_result</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_async_frame_t\" title=\"tiro_async_frame_t\">tiro_async_frame_t</a> <em>frame</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>value</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_async_frame_result\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Sets the return value for the given function call frame to the given <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>. </p>\n<p>Async function frames must be freed (by calling <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_async_frame_free</span></code>) after they have been completed. </p>\n</dd></dl>\n\n<dl class=\"c function\">\n<dt id=\"c.tiro_make_async_function\">\n<span class=\"target\" id=\"objects_8h_1ab9ac332553b182f56655ad49df936241\"></span>void <code class=\"sig-name descname\">tiro_make_async_function</code><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../def/#c.tiro_vm_t\" title=\"tiro_vm_t\">tiro_vm_t</a> <em>vm</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>name</em>, <a class=\"reference internal\" href=\"#c.tiro_async_function_t\" title=\"tiro_async_function_t\">tiro_async_function_t</a> <em>func</em>, size_t <em>argc</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>closure</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <em>result</em>, <a class=\"reference internal\" href=\"../def/#c.tiro_error_t\" title=\"tiro_error_t\">tiro_error_t</a> *<em>err</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_make_async_function\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>Constructs a new function object with the given name that will invoke the native function <code class=\"docutils literal notranslate\"><span class=\"pre\">func</span></code> when called. </p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">argc</span></code> is the number of arguments required for calling <code class=\"docutils literal notranslate\"><span class=\"pre\">func</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">closure</span></code> may be an arbitrary value that will be passed to the function on every invocation.</p>\n<p>On success, the new function will be stored in <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_BAD_TYPE</span></code> if <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> is not a string. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">TIRO_BAD_ARG</span></code> if the the requested number of parameters is too large. The current maximum is <code class=\"docutils literal notranslate\"><span class=\"pre\">1024</span></code>. </p>\n</dd></dl>\n\n</div>\n<dl class=\"c struct\">\n<dt>\n<span class=\"target\" id=\"structtiro__module__member__t\"></span><em class=\"property\">struct </em><code class=\"sig-name descname\">tiro_module_member_t</code><br /></dt>\n<dd><em>#include \u201ctiro/objects.h\u201d</em><div class=\"breathe-sectiondef docutils container\">\n<p class=\"breathe-sectiondef-title rubric\">Public Members</p>\n<dl class=\"c var\">\n<dt id=\"c.tiro_module_member_t.name\">\n<span class=\"target\" id=\"structtiro__module__member__t_1a8f8f80d37794cde9472343e4487ba3eb\"></span><em class=\"property\">const</em> char *<code class=\"sig-name descname\">name</code><a class=\"headerlink\" href=\"#c.tiro_module_member_t.name\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd></dd></dl>\n\n<dl class=\"c var\">\n<dt id=\"c.tiro_module_member_t.value\">\n<span class=\"target\" id=\"structtiro__module__member__t_1a453993e0ab61e6d88f0742e9182d262e\"></span><a class=\"reference internal\" href=\"../def/#c.tiro_handle_t\" title=\"tiro_handle_t\">tiro_handle_t</a> <code class=\"sig-name descname\">value</code><a class=\"headerlink\" href=\"#c.tiro_module_member_t.value\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd></dd></dl>\n\n</div>\n</dd></dl>\n\n<dl class=\"c struct\">\n<dt id=\"c.tiro_native_type\">\n<span class=\"target\" id=\"structtiro__native__type\"></span><em class=\"property\">struct </em><code class=\"sig-name descname\">tiro_native_type</code><a class=\"headerlink\" href=\"#c.tiro_native_type\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><em>#include \u201ctiro/objects.h\u201d</em><p>Describes a native object type to the tiro runtime. </p>\n<p>Instances of this type must be provided to the API when constructing a new native object.</p>\n<p>Native objects that are created with a certain type will continue refencing that type instance by its address. The lifetime of <code class=\"docutils literal notranslate\"><span class=\"pre\">tiro_native_type_t</span></code> instances is not managued by the runtime, they must remain valid for as long as there are native objects referring to them.</p>\n<p><dl class=\"xrefsect\">\n<dt>\n<em>Todo:</em></dt>\n<dd><p>DRAFT API. Will probably be replaced with native user defined types.</p>\n</dd></dl>\n\n</p>\n<p><dl class=\"simple\">\n<dt><strong>Warning</strong></dt><dd><p>The native type instance must not be changed while it is being referenced by native objects! </p>\n</dd>\n</dl>\n</p>\n<div class=\"breathe-sectiondef docutils container\">\n<p class=\"breathe-sectiondef-title rubric\">Public Members</p>\n<dl class=\"c var\">\n<dt id=\"c.tiro_native_type.name\">\n<span class=\"target\" id=\"structtiro__native__type_1a8f8f80d37794cde9472343e4487ba3eb\"></span><em class=\"property\">const</em> char *<code class=\"sig-name descname\">name</code><a class=\"headerlink\" href=\"#c.tiro_native_type.name\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>The human readable name of this type, mainly for debugging. </p>\n<p>Must be a valid zero terminated string. </p>\n</dd></dl>\n\n<dl class=\"c var\">\n<dt id=\"c.tiro_native_type.finalizer\">\n<span class=\"target\" id=\"structtiro__native__type_1a26b7593edb2ef364ec519c6934fdc432\"></span>void (*<code class=\"sig-name descname\">finalizer</code>)<span class=\"sig-paren\">(</span>void *data, size_t size<span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#c.tiro_native_type.finalizer\" title=\"Permalink to this definition\">\u00b6</a><br /></dt>\n<dd><p>This function will be invoked exactly once for each object when it is being garbage collected. </p>\n<p>This member may be NULL if no finalization is needed.</p>\n<p><dl class=\"simple\">\n<dt><strong>Parameters</strong></dt><dd><ul class=\"breatheparameterlist simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code>: The address to the native object\u2019s data. Any resourced owned by <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> should be freed. </p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">size</span></code>: The size of the native object, in bytes. </p></li>\n</ul>\n</dd>\n</dl>\n</p>\n</dd></dl>\n\n</div>\n</dd></dl>\n\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["tiro/version", "version.h", "N", "next"], ["tiro/error", "error.h", "P", "previous"]], "sourcename": "tiro/objects.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">objects.h</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "tiro/objects", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.12"}