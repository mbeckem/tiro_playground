{"componentChunkName":"component---src-templates-docs-article-tsx","path":"/docs/libtiro/getting-started","result":{"data":{"mdx":{"id":"b97cf72a-bc97-5b1c-8622-e3fb50fd7a42","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting started with libtiro\",\n  \"slug\": \"libtiro/getting-started\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following instructions assume a reasonably up-to-date Linux or Unix system.\"), mdx(\"h2\", null, \"Building from source\"), mdx(\"p\", null, \"As the firt step, use git to clone the repository:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git clone https://github.com/mbeckem/tiro.git\\n\")), mdx(\"h3\", null, \"Requirements\"), mdx(\"p\", null, \"The following tools must be installed on your system to build tiro:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A C++17 compiler. The following compilers are tested regularly:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"gcc 8, 9 (Linux )\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"clang 9, 10 (Linux)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"xcode 11 (OSX)\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"MSVC is currently not supported (minor adjustments are necessary to make tiro compile). clang-cl should work.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"CMake >= 3.13\"))), mdx(\"p\", null, \"No other external tools or libraries are needed.\\nLibrary dependencies needed by tiro (listed \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mbeckem/tiro#dependencies\"\n  }), \"here\"), \") will be fetched automatically during the build.\"), mdx(\"h3\", null, \"Building and installing\"), mdx(\"p\", null, \"Create a build directory, configure cmake and then run your build system.\"), mdx(\"p\", null, \"The following example performs a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"system wide\"), \" installation of tiro.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"You can chose a custom location by specifying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-DCMAKE_INSTALL_PREFIX=/your/install/prefix\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mkdir build && cd build\\n$ cmake -DCMAKE_BUILD_TYPE=Release -DTIRO_LTO=1 ..\\n$ make -j8\\n$ make install\\n\")), mdx(\"p\", null, \"The following cmake variables can be useful to customize the build process:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"CMake Variable\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"TIRO_LTO = ON \", \"|\", \" OFF\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Optional (off by default). Attempts to enable link time optimization, if supported by the compiler. Results in smaller and more optimized output and is recommended in release builds.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"TIRO_WARNINGS = ON \", \"|\", \" OFF\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Optional (off by default). Enables pedantic warnings, mainly used during development.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"TIRO_TESTS= ON \", \"|\", \" OFF\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Optional (off by default). Also build test executables when enabled (placed into \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"build/bin\"), \").\")))), mdx(\"p\", null, \"After the build has completed, the compiled output can be found in your install prefix:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-plain\"\n  }), \"<install prefix>\\n|-- include\\n|   |-- tiro        # C headers for libtiro.so\\n|   `-- tiropp      # C++ headers for libtiro.so\\n`-- lib\\n    |-- cmake       # CMake support scripts\\n    `-- libtiro.so  # tiro as a shared library\\n\")), mdx(\"h3\", null, \"Create a simple test program\"), mdx(\"p\", null, \"Create a simple program that links against libtiro and prints its current version:\"), mdx(\"span\", {\n    className: \"caption\"\n  }, \"Example: hello.c\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-c\"\n  }), \"#include <tiro/version.h>\\n\\n#include <stdio.h>\\n\\nint main() {\\n    printf(\\\"Hello from %s\\\\n\\\", tiro_full_version());\\n}\\n\")), mdx(\"p\", null, \"Now compile and run your application. Make sure that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"libtiro.so\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tiro/version.h\"), \" can be found by your compiler.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ gcc hello.c -o hello -ltiro\\n$ ./hello\\nHello from tiro 0.1.0-dev (git:ae107e2bc05173d8dfa49de21094252271de133a)\\n\")), mdx(\"h3\", null, \"Further documentation\"), mdx(\"p\", null, \"The full build system reference is maintained in the tiro source repository: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mbeckem/tiro/blob/master/docs/building.md\"\n  }), \"Reference\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Getting started with libtiro","slug":"libtiro/getting-started"}}},"pageContext":{"id":"b97cf72a-bc97-5b1c-8622-e3fb50fd7a42"}},"staticQueryHashes":["3649515864","63159454"]}