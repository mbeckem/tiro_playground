{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.c2465a9f36df18711383.hot-update.js","sources":["webpack:///./src/pages/index.tsx"],"sourcesContent":["import { Component } from \"react\";\nimport TiroCompiler, { createCompiler, CompilerResult } from \"../TiroCompiler\";\nimport { CompilerView } from \"../components/CompilerView\";\n\ninterface PlaygroundState {\n    compiling: boolean;\n    currentSource: string;\n    compiler?: TiroCompiler;\n    result?: CompilerResult;\n}\n\nconst INITIAL_SOURCE = `\nimport std;\n\nfunc main() {\n    const object = \"World\";\n    std.print(\"Hello ${object}!\");\n}\n\n`.trimStart();\n\nfunction asyncSetState<T extends Component, S>(\n    comp: Component,\n    newState: S\n): Promise<void> {\n    return new Promise((resolve) => {\n        comp.setState(newState, resolve);\n    });\n}\n\nexport default class Playground extends Component<{}, PlaygroundState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            compiling: false,\n            currentSource: INITIAL_SOURCE,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        let compiler;\n        try {\n            compiler = await createCompiler();\n        } catch (e) {\n            console.error(\"Failed to create compiler instance\", e);\n            return;\n        }\n\n        await asyncSetState(this, { compiler });\n        this._startCompilation(this.state.currentSource);\n    }\n\n    componentWillUnmount(): void {\n        this.state.compiler?.destroy();\n    }\n\n    private async _startCompilation(source: string): Promise<void> {\n        // TODO: Async compilation api (Web worker?)\n        try {\n            const { compiler } = this.state;\n            await asyncSetState(this, { compiling: true });\n            const result = compiler?.compile(source);\n            await asyncSetState(this, { compiling: false, result });\n        } catch (e) {\n            // TODO: Error state in UI\n            console.error(\"Compilation failed\", e);\n        }\n    }\n\n    render(): JSX.Element {\n        const { compiling, currentSource, compiler, result } = this.state;\n        if (!compiler || !result) {\n            return <div>Loading...</div>;\n        }\n\n        return (\n            <CompilerView\n                compiling={compiling}\n                initialSource={currentSource}\n                result={result}\n                onSourceChanged={this._handleSourceChanged}\n            ></CompilerView>\n        );\n    }\n\n    private _handleSourceChanged = async (value: string): Promise<void> => {\n        await asyncSetState(this, { currentSource: value });\n        this._startCompilation(value);\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AASA;AACA;AASA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAsDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AArDA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;;;;;;;;;AAIA;AACA;;AADA;;;;;;;AAEA;;;;;AAIA;AAAA;AAAA;AACA;;AAAA;AACA;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;;;AAEA;;;;;;;AAGA;;AACA;AAAA;AAAA;AACA;;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;AACA;AACA;AACA;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AArDA;AACA;;;;;A","sourceRoot":""}