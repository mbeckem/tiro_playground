{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.c6fd1057a15d4fa1413c.hot-update.js","sources":["webpack:///./src/pages/index.tsx"],"sourcesContent":["import TiroCompiler, { createCompiler, CompilerResult } from \"../TiroCompiler\";\nimport { Component } from \"react\";\nimport Editor from \"../components/Editor\";\n\ninterface PlaygroundState {\n    compiler?: TiroCompiler;\n    result?: CompilerResult;\n}\n\nexport default class Playground extends Component<{}, PlaygroundState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount(): void {\n        createCompiler().then((compiler) => {\n            const result = compiler.compile(`\n                import std;\n        \n                func foo() {\n                    for (var i = 1; i <= 10; i += 1) {\n                        std.print(i);\n                    }\n                }\n            `);\n\n            this.setState({\n                compiler,\n                result,\n            });\n        });\n    }\n\n    componentWillUnmount(): void {\n        this.state.compiler?.destroy();\n    }\n\n    render(): JSX.Element {\n        const { compiler, result } = this.state;\n        if (!compiler || !result) {\n            return <div>Loading...</div>;\n        }\n\n        const messages = result.messages.map((message, index) => {\n            return <li key={index}>{message}</li>;\n        });\n\n        return (\n            <div>\n                <div>Success: {result.success.toString()}</div>\n                <div>Time taken: {result.elapsedMillis.toFixed(3)} ms</div>\n                <div>Messages:</div>\n                <ul>{messages}</ul>\n                <pre>{result.ast}</pre>\n                <pre>{result.ir}</pre>\n                <pre>{result.bytecode}</pre>\n                <Editor\n                    initialSource={this.state.result?.ast || \"\"}\n                    onChange={this._sourceChanged}\n                />\n            </div>\n        );\n    }\n\n    private _sourceChanged = (value: string): void => {\n        console.log(\"new source\", value);\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAwDA;AACA;AACA;AAxDA;AAFA;AAGA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AASA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;;;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAtDA;AACA;;;;;A","sourceRoot":""}