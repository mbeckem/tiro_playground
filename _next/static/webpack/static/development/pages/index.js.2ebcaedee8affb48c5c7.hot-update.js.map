{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.2ebcaedee8affb48c5c7.hot-update.js","sources":["webpack:///./src/pages/index.tsx"],"sourcesContent":["import { Component } from \"react\";\nimport { CompilationResult, Runtime, createRuntime } from \"@/runtime\";\nimport { CompilerView } from \"../components/CompilerView\";\n\ninterface PlaygroundState {\n    initialized: boolean;\n    compiling: boolean;\n    currentSource: string;\n    result?: CompilationResult;\n}\n\nconst INITIAL_SOURCE = `\nimport std;\n\nfunc main() {\n    const object = \"World\";\n    std.print(\"Hello \\${object}!\");\n}\n`.trimStart();\n\nfunction asyncSetState<T extends Component, S>(\n    comp: T,\n    newState: S\n): Promise<void> {\n    return new Promise((resolve) => {\n        comp.setState(newState, resolve);\n    });\n}\n\nexport default class Playground extends Component<{}, PlaygroundState> {\n    private _runtime?: Runtime;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            initialized: false,\n            compiling: false,\n            currentSource: INITIAL_SOURCE,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        let runtime;\n        try {\n            runtime = await createRuntime();\n        } catch (e) {\n            // TODO error UI\n            console.error(\"Failed to create runtime instance\", e);\n            return;\n        }\n\n        this._runtime = runtime;\n        this.setState({ initialized: true });\n        this._startCompilation(this.state.currentSource);\n    }\n\n    componentWillUnmount(): void {\n        this._runtime?.destroy();\n        this._runtime = undefined;\n    }\n\n    private async _startCompilation(source: string): Promise<void> {\n        // TODO: Async compilation api (Web worker?)\n        try {\n            await asyncSetState(this, { compiling: true });\n            const result = this._runtime?.compile(source);\n            this.setState({ compiling: false, result });\n\n            const exec = this._runtime?.run(\"main\");\n            console.debug(exec);\n        } catch (e) {\n            // TODO: Error state in UI\n            console.error(\"Compilation failed\", e);\n        }\n    }\n\n    render(): JSX.Element {\n        const { initialized, compiling, currentSource, result } = this.state;\n        if (!initialized) {\n            return <div>Loading...</div>;\n        }\n\n        return (\n            <CompilerView\n                compiling={compiling}\n                initialSource={currentSource}\n                result={result}\n                onSourceChanged={this._handleSourceChanged}\n            ></CompilerView>\n        );\n    }\n\n    private _handleSourceChanged = async (value: string): Promise<void> => {\n        await asyncSetState(this, { currentSource: value });\n        this._startCompilation(value);\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AASA;AACA;AAQA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AA4DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA3DA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;;;;;;;;;AAIA;AACA;;AADA;;;;;;;AAEA;AACA;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;;;AAEA;;;;;;;;;AAGA;AAAA;AAAA;AACA;;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AA7DA;AACA;;;;;A","sourceRoot":""}